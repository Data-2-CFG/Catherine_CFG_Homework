# -*- coding: utf-8 -*-
"""Homework_week4.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vBhm3tJ_3jQec8RRxFcnKHpXWpAZvvT9
"""

# Complete definitions for key Git & GitHub terminology
# GIT WORKFLOW FUNDAMENTALS
# ·        Working Directory
The working directory is a single checkout of one version of the project. 
These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.
# ·        Staging Area
The staging area is a file, generally contained in your Git directory, 
that stores information about what will go into your next commit. 
# ·        Local Repo (head)
The local repository is a Git repository that is stored on your computer. 
# ·        Remote repo (master)
 The remote repository is a Git repository that is stored on some remote computer.

# WORKING DIRECTORY STATES:
# ·        Staged
# ·        Modified
# ·        Committed
Staged means that you have marked a modified file in its current version to go into your next commit snapshot.

Modified means that you have changed the file but have not committed it to your database yet.

Committed means that the data is safely stored in your local database.
# GIT COMMANDS:
# ·        Git add
updates the index using the current content found in the working directory, to prepare the content staged for the next commit
# ·        Git commit
Record changes to the repository
# ·        Git push
Update remote refs along with associated objects
# ·        Git fetch
Download objects and refs from another repository
# ·        Git merge
Join two or more development histories together
# ·        Git pull
Fetch from and integrate with another repository or a local branch

# # from logging import ERROR
# # # TASK 2 (Exception Handling)

# # # Question 1
# # # Simple ATM program
# # # Using exception handling code blocks such as try/ except / else / finally, write a program that simulates an ATM machine to withdraw money.
# # # (NB: the more code blocks the better, but try to use at least two key words e.g. try/except)
# # # Tasks:
# # # 1.       Prompt user for a pin code
# # # 2.       If the pin code is correct then proceed to the next step, otherwise ask a user to type in a password again. You can give a user a maximum of 3 attempts and then exit a program.
# # # 3.       Set account balance to 100.
# # # 4.       Now we need to simulate cash withdrawal
# # # 5.       Accept the withdrawal amount
# # # 6.       Subtract the amount from the account balance and display the remaining balance (NOTE! The balance cannot be negative!)
# # # 7.       However, when a user asks to ‘withdraw’ more money than they have on their account, then you need to raise an error an exit the program. 



def ATM():
  password = 1122
  balance = 100
  attempt = 0
  while attempt < 3:
      attempt += 1
      try:
        pin= input('what is you pin code?')
        if not pin.isdigit():
          raise TypeError 
        elif len(str(pin)) > 4:
          return "You should input 4 digit"
        elif int(pin) != password:
          raise ValueError
        else:
            try:
              withdrawal = int(input(' how much do you want to withdrawal?'))
              if withdrawal > 100:
                raise ValueError
              else:
                return f'You have {balance - withdrawal} remaining'
              break
            except ValueError:
              return "you don't have enough money"
              break
      except TypeError:
          return "You should input a number"  
      except ValueError:
          return "You have entered a wrong pin"
      except KeyboardInterrupt:
          break

ATM()



# TASK 3 (Testing)

# Question 1
# Use the Simple ATM program to write unit tests for your functions.
# You are allowed to re-factor your function to ‘untangle’ some logic into smaller blocks of code to make it easier to write tests.
# Try to write at least 5 unit tests in total covering various cases.



def ATM_test_function(pin, withdrawal):
  password = 1122
  balance = 100
  attempt = 0
  while attempt < 3:
      attempt += 1
      try:   
        if type(pin) is not int:
          raise TypeError
        elif len(str(pin)) > 4:
          return "You should input 4 digit"
        elif password != pin:
          raise ValueError
        else:
            try:
              if withdrawal > 100:
                raise ValueError
              else:
                return f'You have {balance - withdrawal} remaining'
              break
            except ValueError:
              return "You don't have enough money"
              break

      except TypeError:
        return "You should input a number"
      except ValueError:
        return "You have entered a wrong pin"
      except KeyboardInterrupt:
        break

#### unit testing
import unittest
class TestATM(unittest.TestCase):
  def test_input_datatype(self):
    actual = ATM_test_function('hahah', 50)
    expected = 'You should input a number'
    self.assertEqual(actual, expected)

  def test_pin_length(self):
    actual = ATM_test_function(1234567, 50)
    expected = 'You should input 4 digit'
    self.assertEqual(actual, expected)

  def test_wrong_pin(self):
    actual = ATM_test_function(1234, 50)
    expected = 'You have entered a wrong pin'
    self.assertEqual(actual, expected)

  def test_right_pin(self):
    actual = ATM_test_function(1122, 50)
    expected = 'You have 50 remaining'
    self.assertEqual(actual, expected)

  def test_withdrawal(self):
    actual = ATM_test_function(1122, 120)
    expected = "You don't have enough money"
    self.assertEqual(actual, expected)



if __name__ == '__main__':
  unittest.main(argv=['first-arg-is-ignored'], exit=False)