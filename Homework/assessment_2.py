# -*- coding: utf-8 -*-
"""assessment_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1af-GnyURNKSamQpJSWi1nCuR8h363pPH
"""

# 1. What is the program?
# 2. What is the process?
# 3. What is Cache?
# 4. What is Thread and Multithreading?
# 5. What is GIL in Python and how does it work?
# 6. What is Concurrency and Parallelism and what are the differences?
# 7. What do these stand for in programming: DRY, KISS, BDUF
# 8. What is Garbage collector? How does it work?
# 9. What are ‘deadlock’ and ‘livelock’ in a relational database?
# 10. What is Flask and what can we use it for?

# 1. What is the program?
"A program is a set of instructions that a computer follows in order to perform a particular task"
# 2. What is the process?
"It is an executing program in computer memory."
# 3. What is Cache?
"A cache is a block of memory for storing data which is likely used again"
# 4. What is Thread and Multithreading?
"A thread is an execution context, which is all the information a CPU needs to execute a stream of instructions "

"Multithreading enables us to run multiple threads concurrently."
# 5. What is GIL in Python and how does it work?
"GIL stands for global interpreter lock: The GIL allows only one OS thread to execute Python bytecode at any given time"
# 6. What is Concurrency and Parallelism and what are the differences?
"Concurrency is when multiple sequences of operations are run in overlapping periods of time,"
"Parallelism refers to techniques to make programs faster by performing several computations at the same time"
# 7. What do these stand for in programming: DRY, KISS, BDUF
"Dry :Don’t Repeat Yourself, When writing your code, don’t repeat yourself
"KISS : Keep It Simple Stupid, ensure your programming is simple and clear to understand"
"BDUF: Big Design Up Front, developer should complete the project’s design first. After that, they can now implement it.""
# 8. What is Garbage collector? How does it work?
"Garbage collection is to release memory when the object is no longer in use"
"It works through those two ways : Reference counting/Generational garbage collection"
# 9. What are ‘deadlock’ and ‘livelock’ in a relational database?
"Deadlock is when two concurrent transactions cannot make progress because each one waits for the other to release a lock;"
"Livelock is a deadlock-like situation in which processes block each other with a repeated state change yet make no progress"
# 10. What is Flask and what can we use it for?
"Flask is web framework, use it for :
"Integrated support for unit testing"
"Easily deployable in production"
"Easy to create APIs"
"Supports Visual Debugging"
"Can be easily integrated with all the major databases""

# 2. Discuss the difference between Python 2 and Python 3 
"Python 3 fixed some problems that exist in python 2

Key differences:
"Python 3 syntax is simpler and easily understandable whereas Python 2 syntax is comparatively difficult to understand."
"Python 3 default storing of strings is Unicode whereas Python 2 stores need to define Unicode string value with “u.”"
"""Python 3 value of variables never changes whereas in Python 2 value of the global variable will be changed while using it inside for-loop.
"Python 3 exceptions should be enclosed in parenthesis while Python 2 exceptions should be enclosed in notations."
Python 3 rules of ordering comparisons are simplified whereas Python 2 rules of ordering comparison are complex.
Python 3 offers Range() function to perform iterations whereas, In Python 2, the xrange() is used for iterations."""
"

# 3. Write a function that can define whether a word is a Palindrome or
# not (a word, phrase, or sequence that reads the same backwards
# as forwards, e.g. madam)
def Palinadrome(word):
  if type(word) is int:
    return 'Input a string please'
  elif word == word[::-1]:
    return 'Is a Palinadrome'
  else:
    return 'Not a Palinadrome'

print(Palinadrome('madam'))

# 4. Write tests for the newly created Palindrome function. Provide a
# brief explanation for your test case options.


import unittest
class TestPalinadrome(unittest.TestCase):
  def test_input_type(self):
    actual = Palinadrome(1)
    expected = 'Input a string please'
    self.assertEqual(actual, expected)
  
  def test_palinadrome(self):
    actual = Palinadrome('madam')
    expected = 'Is a Palinadrome'
    self.assertEqual(actual, expected)
  
  def test_not_palinadrome(self):
    actual = Palinadrome('Catherine')
    expected = 'Not a Palinadrome'
    self.assertEqual(actual, expected)

if __name__ == '__main__':
  unittest.main(argv=['first-arg-is-ignored'], exit=False)
###  Unit test allows to test a small unit of function, first I want to test whether the function has a correct input, in this case, our function should only accept a string.
###  So the first test case is for checking the datatype, if input is not a string, I will give back a message ' input should be a string'
###  The second, the third case are to test whether our function is returning correct answers
###  either a string is a palindrome or not, the value that our function returned equals with expected value or not.

# 5. Agile methodology, Scrum: name at least 3 types of meetings that
# are exercised by Agile teams and describe the objective of each meeting.
"1 -Daily scrum meeting: also called standups, it is an internal meeting for the Scrum,"
"   team will use this time to inspect progress toward the Sprint Goal and adapt the Sprint Backlog as necessary, "
"   adjusting the upcoming planned work and produces an actionable plan for the next day of work.""

" 2-Sprint review meeting: Sprint review happens at the end of a Sprint, before the Sprint Retrospective.
"  Its purpose is to inspect the work that has been done to date and to decide what next steps make sense based on what was learned from that" 
"  and it’s the moment where the Product Owner invites stakeholder to inspect the product together"
"
"3-Sprint retrospective meeting: this meeting is time for team to discuss the ways to increase quality and effectiveness, 
"  Also to reflect back on work like what went wrong and right.""

# 6. Exception handling in Python, explain what each of the followingblocks means in the program flow:
# Try, except, else, finally
Try: "the code under try statement will run and if there is an error, then the expection message will be raised(the type error has to match the name after except keyword)." 
     "if there is no error, then everythong will run smoothly without an expection"

Except: 'let you handle the errors, you can manually write your message for the certain error'

Else: 'if there is no erro, this line code will run'

finally: 'lets you execute code, regardless of the result of the try- and except blocks.'

# 7. How can we connect a Python program (process) with a database? Explain how it works and how do we fetch / insert data into DB tables from a python program.
"We need to use MySQL connector module to connect python with a database, the steps are below: first we need to know the details of server like: Surname,Password,hostname,database name"
"1-Install MySQL connector module"
"2-Import MySQL connector module"
"3-Use the connect() method"
"4-Use the cursor() method to perform various SQL operations."
'5-Use the execute() method to run and return the result'
"6-Extract result using fetchall()"
"7-Close cursor and connection object"
#how do we fetch / insert data into DB tables from a python program
"First you need to make sure you know the Username and password to connect MySQL, MySQL table name in which you want to insert data"
"the steps are below:"
"1-Connect to MySQL from Python"
"2-Define a SQL Insert query, for example: insert into authors(author_name, book_name) values (shakespeare, Romeo and Julie)"
"3-Get Cursor Object from Connection"
"4-Execute the insert query using execute() method"
"5-Commit your changes using commit()"
"6-Fetchall() to see the result"
"7-Close() the database connection"

# 8. Given two SQL tables below: authors and books.
# ● The authors dataset has 1M+ rows
# ● The books dataset also has 1M+ rows
# Create an SQL query that shows the TOP 3 authors who sold the
# most books in total!

SELECT author_name, SUM(books.sold_copies) from authors
JOIN books 
ON authors.book_name = books.book_name
GROUP BY author_name
ORDER BY 2 DESC
LIMIT 3;

# 9
# ●	Write a function that takes in a non-empty array of distinct integers and an integer representing a target sum. If any two numbers in the input array sum up to the target sum, the function should return them in an array, in any order. If no to numbers sum up to the target sum, the function should return an empty array.
# ●	Note that the target sum has to be obtained by summing two different integers in the array. You cannot add a single integer to itself in order to obtain the target sum.
# ●	You can assume that there will be at most one pair of numbers summing up to the target sum. 
# Sample Input: numbers = [3, 5, -4 ,8, 11, 1, -1, 6]  target_sum = 10
# Sample Output: [-1, 11] the numbers can be in any  order, it does not matter.

def target(num, target_num):
    target_nums = []
    for i in range(len(num)):
        for j in range(i+1, len(num)):
            if num[i] + num[j] == target_num:
                target_nums.extend([num[i], num[j]])

    return target_nums

num = [3, 5, -4, 8, 11, 1, -1, 6]
target_num = 10
print(target(num, target_num))